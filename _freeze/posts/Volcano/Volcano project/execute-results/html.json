{
  "hash": "3fbde2b5cf65ac0063c3eb0244cb06a7",
  "result": {
    "markdown": "---\ntitle: \"Multinomial Volcano Classification project\"\nauthor: Jayjit Das\ncode-fold: true\ncode-tools: true\nformat:\n  html:\n    toc: true\n    warning: false\n---\n\n\n# Goal: To build a multiclass classification model to predict type of volcano.\n\nOur objective in modeling is to forecast the category of volcanoes in this week's #TidyTuesday dataset, relying on various volcano characteristics such as latitude, longitude, tectonic setting, etc. Since there are more than two volcano types, this task falls under the category of multiclass or multinomial classification rather than binary classification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_raw <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-05-12/volcano.csv\")\n\nvolcano_raw %>%\n  count(primary_volcano_type, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 26 × 2\n   primary_volcano_type     n\n   <chr>                <int>\n 1 Stratovolcano          353\n 2 Stratovolcano(es)      107\n 3 Shield                  85\n 4 Volcanic field          71\n 5 Pyroclastic cone(s)     70\n 6 Caldera                 65\n 7 Complex                 46\n 8 Shield(s)               33\n 9 Submarine               27\n10 Lava dome(s)            26\n# ℹ 16 more rows\n```\n:::\n:::\n\n\nGiven the abundance of volcano types and our limited dataset of only 958 examples, building a model for each type might be challenging. Instead, let's simplify the task by creating a new variable named **`volcano_type`** and focus on distinguishing between three main types:\n\n1.  Stratovolcano\n\n2.  Shield volcano\n\n3.  Everything else (other)\n\nAs we employ the **`transmute()`** function to generate this new variable, let's also choose the specific variables relevant for modeling. These variables will include information about the tectonics surrounding the volcano and the most crucial rock type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_df <- volcano_raw %>%\n  transmute(\n    volcano_type = case_when(\n      str_detect(primary_volcano_type, \"Stratovolcano\") ~ \"Stratovolcano\",\n      str_detect(primary_volcano_type, \"Shield\") ~ \"Shield\",\n      TRUE ~ \"Other\"\n    ),\n    volcano_number, latitude, longitude, elevation,\n    tectonic_settings, major_rock_1\n  ) %>%\n  mutate_if(is.character, factor)\n\nvolcano_df %>%\n  count(volcano_type, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  volcano_type      n\n  <fct>         <int>\n1 Stratovolcano   461\n2 Other           379\n3 Shield          118\n```\n:::\n:::\n\n\nWe will be building a multiclass predictive model since the papers are categorized into three groups: finance, microeconomics, and macroeconomics. Unlike the common use of binary classification models, our objective involves predicting among multiple classes. Before diving into the modeling process, let's generate an exploratory plot.\n\nVisualizing the distribution of various volcano types.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- map_data(\"world\")\n\nggplot() +\n  geom_map(\n    data = world, map = world,\n    aes(long, lat, map_id = region),\n    color = \"white\", fill = \"gray50\", size = 0.05, alpha = 0.2\n  ) +\n  geom_point(\n    data = volcano_df,\n    aes(longitude, latitude, color = volcano_type),\n    alpha = 0.8\n  ) +\n  theme_void(base_family = \"IBMPlexSans\") +\n  labs(x = NULL, y = NULL, color = NULL)\n```\n\n::: {.cell-output-display}\n![](Volcano-project_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThese type of relationships between category and title words are what we want to use in our predictive model.\n\n## Building a model\n\nInstead of dividing this relatively small dataset into training and testing data, a set of bootstrap resamples will be generated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nvolcano_boot <- bootstraps(volcano_df)\n\nvolcano_boot\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Bootstrap sampling \n# A tibble: 25 × 2\n   splits            id         \n   <list>            <chr>      \n 1 <split [958/352]> Bootstrap01\n 2 <split [958/358]> Bootstrap02\n 3 <split [958/362]> Bootstrap03\n 4 <split [958/360]> Bootstrap04\n 5 <split [958/347]> Bootstrap05\n 6 <split [958/358]> Bootstrap06\n 7 <split [958/347]> Bootstrap07\n 8 <split [958/362]> Bootstrap08\n 9 <split [958/344]> Bootstrap09\n10 <split [958/349]> Bootstrap10\n# ℹ 15 more rows\n```\n:::\n:::\n\n\nOur multinomial classification model will be trained on these resamples. Next, our data will be preprocessed using a recipe. Considering the substantial imbalance with significantly fewer shield volcanoes compared to the other groups, SMOTE upsampling (via the themis package) will be applied to balance the classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(themis)\n\nvolcano_rec <- recipe(volcano_type ~ ., data = volcano_df) %>%\n  update_role(volcano_number, new_role = \"Id\") %>%\n  step_other(tectonic_settings) %>%\n  step_other(major_rock_1) %>%\n  step_dummy(tectonic_settings, major_rock_1) %>%\n  step_zv(all_predictors()) %>%\n  step_normalize(all_predictors()) %>%\n  step_smote(volcano_type)\n```\n:::\n\n\n1.  First, the **`recipe()`** function needs to be informed about the model using a formula and the data it will work with.\n\n2.  Following that, an update is made to the role of the volcano number, designating it as a variable to retain for convenience as an identifier for rows, although it is neither a predictor nor an outcome.\n\n3.  Considering the numerous tectonic settings and rocks in the dataset, less frequently occurring levels are combined into an \"Other\" category for each predictor.\n\n4.  Subsequently, indicator variables are created, and those with zero variance are removed.\n\n5.  Prior to oversampling, all predictors are centered and scaled (normalized).\n\n6.  Lastly, SMOTE oversampling is implemented to ensure balance among the volcano types.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_prep <- prep(volcano_rec)\njuice(volcano_prep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,383 × 14\n   volcano_number latitude longitude elevation volcano_type \n            <dbl>    <dbl>     <dbl>     <dbl> <fct>        \n 1         283001   0.618      0.984   -0.875  Shield       \n 2         355096  -1.21      -0.830    2.97   Stratovolcano\n 3         342080  -0.0153    -1.04     1.50   Stratovolcano\n 4         213004   0.746      0.101   -0.131  Other        \n 5         321040   0.988     -1.32     1.34   Stratovolcano\n 6         283170   0.718      1.06    -0.0992 Stratovolcano\n 7         221170  -0.156      0.158   -0.0956 Stratovolcano\n 8         221110  -0.0601     0.158   -0.440  Stratovolcano\n 9         284160   0.120      1.11    -0.644  Stratovolcano\n10         342100  -0.0165    -1.04     1.35   Stratovolcano\n# ℹ 1,373 more rows\n# ℹ 9 more variables:\n#   tectonic_settings_Rift.zone...Continental.crust...25.km. <dbl>,\n#   tectonic_settings_Rift.zone...Oceanic.crust....15.km. <dbl>,\n#   tectonic_settings_Subduction.zone...Continental.crust...25.km. <dbl>,\n#   tectonic_settings_Subduction.zone...Oceanic.crust....15.km. <dbl>,\n#   tectonic_settings_other <dbl>, major_rock_1_Basalt...Picro.Basalt <dbl>, …\n```\n:::\n:::\n\n\nBefore utilizing **`prep()`**, the defined steps have been outlined but not executed. The evaluation of these steps takes place within the **`prep()`** function. The **`juice()`** function can then be employed to retrieve the preprocessed data and inspect the results.\n\nNow, the model specification is the focus. In this example, a **`workflow()`** is used for convenience. Workflows are objects designed to facilitate the management of modeling pipelines, with components that seamlessly fit together like Lego blocks. This particular **`workflow()`** includes both the recipe and the model, specifically a random forest classifier. The ranger implementation for random forests can handle multinomial classification without requiring any special handling.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(trees = 1000) %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"ranger\")\n\nvolcano_wf <- workflow() %>%\n  add_recipe(volcano_rec) %>%\n  add_model(rf_spec)\n\nvolcano_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_other()\n• step_other()\n• step_dummy()\n• step_zv()\n• step_normalize()\n• step_smote()\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  trees = 1000\n\nComputational engine: ranger \n```\n:::\n:::\n\n\nFitting workflow to our resamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_res <- fit_resamples(\n  volcano_wf,\n  resamples = volcano_boot,\n  control = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n\n## Exploring results\n\nA significant distinction when dealing with multiclass problems lies in the utilization of different performance metrics. The yardstick package offers implementations for a variety of multiclass metrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_res %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric  .estimator  mean     n std_err .config             \n  <chr>    <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy multiclass 0.642    25 0.00466 Preprocessor1_Model1\n2 roc_auc  hand_till  0.789    25 0.00321 Preprocessor1_Model1\n```\n:::\n:::\n\n\nA confusion matrix can be generated to assess the performance of the various classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_res %>%\n  collect_predictions() %>%\n  conf_mat(volcano_type, .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Truth\nPrediction      Other Shield Stratovolcano\n  Other          1978    330           824\n  Shield          364    576           313\n  Stratovolcano  1144    172          3099\n```\n:::\n:::\n\n\nEven with the application of SMOTE oversampling, identifying stratovolcanoes remains relatively straightforward.\n\nWhile accuracy and AUC were computed during fit_resamples(), it's possible to revisit and calculate additional metrics of interest if the predictions were saved. Additionally, using group_by() on resamples allows for further analysis. Perform the same actions again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_res %>%\n  collect_predictions() %>%\n  group_by(id) %>%\n  ppv(volcano_type, .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 25 × 4\n   id          .metric .estimator .estimate\n   <chr>       <chr>   <chr>          <dbl>\n 1 Bootstrap01 ppv     macro          0.584\n 2 Bootstrap02 ppv     macro          0.597\n 3 Bootstrap03 ppv     macro          0.622\n 4 Bootstrap04 ppv     macro          0.552\n 5 Bootstrap05 ppv     macro          0.590\n 6 Bootstrap06 ppv     macro          0.624\n 7 Bootstrap07 ppv     macro          0.608\n 8 Bootstrap08 ppv     macro          0.584\n 9 Bootstrap09 ppv     macro          0.616\n10 Bootstrap10 ppv     macro          0.579\n# ℹ 15 more rows\n```\n:::\n:::\n\n\nExploring some variable importance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vip)\n\nrf_spec %>%\n  set_engine(\"ranger\", importance = \"permutation\") %>%\n  fit(\n    volcano_type ~ .,\n    data = juice(volcano_prep) %>%\n      select(-volcano_number) %>%\n      janitor::clean_names()\n  ) %>%\n  vip(geom = \"point\")\n```\n\n::: {.cell-output-display}\n![](Volcano-project_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThe spatial information holds significant importance for the model, with the presence of basalt being the next crucial factor. To delve deeper into the spatial information, let's further explore it and create a map illustrating the accuracy or inaccuracy of our modeling across the world. We can achieve this by rejoining the predictions back to the original data. Repeat this process once again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvolcano_pred <- volcano_res %>%\n  collect_predictions() %>%\n  mutate(correct = volcano_type == .pred_class) %>%\n  left_join(volcano_df %>%\n    mutate(.row = row_number()))\n\nvolcano_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8,800 × 15\n   id          .pred_Other .pred_Shield .pred_Stratovolcano  .row .pred_class  \n   <chr>             <dbl>        <dbl>               <dbl> <int> <fct>        \n 1 Bootstrap01       0.164       0.0844               0.752     8 Stratovolcano\n 2 Bootstrap01       0.228       0.0559               0.716    10 Stratovolcano\n 3 Bootstrap01       0.580       0.244                0.175    11 Other        \n 4 Bootstrap01       0.277       0.176                0.546    16 Stratovolcano\n 5 Bootstrap01       0.247       0.421                0.333    17 Shield       \n 6 Bootstrap01       0.216       0.439                0.344    22 Shield       \n 7 Bootstrap01       0.210       0.608                0.182    26 Shield       \n 8 Bootstrap01       0.213       0.0934               0.694    27 Stratovolcano\n 9 Bootstrap01       0.291       0.0521               0.657    28 Stratovolcano\n10 Bootstrap01       0.332       0.560                0.108    29 Shield       \n# ℹ 8,790 more rows\n# ℹ 9 more variables: volcano_type <fct>, .config <chr>, correct <lgl>,\n#   volcano_number <dbl>, latitude <dbl>, longitude <dbl>, elevation <dbl>,\n#   tectonic_settings <fct>, major_rock_1 <fct>\n```\n:::\n:::\n\n\nNext, let's generate a map using **`stat_summary_hex()`**. Within each hexagon, we'll calculate the mean of correctness to determine the percentage of volcanoes that were classified correctly across all our bootstrap resamples.\n\n### Visualization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_map(\n    data = world, map = world,\n    aes(long, lat, map_id = region),\n    color = \"white\", fill = \"grey90\", size = 0.05, alpha = 0.5\n  ) +\n  stat_summary_hex(\n    data = volcano_pred,\n    aes(longitude, latitude, z = as.integer(correct)),\n    fun = \"mean\",\n    alpha = 0.7, bins = 50\n  ) +\n  scale_fill_gradient(high = \"red\", labels = scales::percent) +\n  theme_void(base_family = \"IBMPlexSans\") +\n  labs(x = NULL, y = NULL, fill = \"Percent classified\\ncorrectly\")\n```\n\n::: {.cell-output-display}\n![](Volcano-project_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Volcano-project_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}